Ques 1 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Minimize-the-maximum-of-two-arrays :

C++
#define ll long long
class Solution {
public:

    bool satisfy(int d1,int d2, int c1,int c2,int mid){
        ll divisible1= mid/d1, divisibe2=mid/d2;
        ll notDivisible1= mid- divisible1, notDivisible2= mid- divisibe2;
        ll notDivToBoth = mid - mid/lcm(d1,d2);

        if(notDivisible1 >= c1 && notDivisible2 >= c2 && notDivToBoth>=c1+c2 ){
            return true;
        }
        return false;
    }

    int minimizeSet(int d1, int d2, int Cnt1, int Cnt2) {
        ll ans=INT_MAX, start=1,end=INT_MAX;
        
        while(start<=end){
            ll mid = start+ (end-start)/2;
            if(satisfy(d1,d2,Cnt1,Cnt2,mid)){
                ans=min(ans,mid);
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
}

Here in this question I am using binary search as the input is sorted as well as some mathamatical formulas (which i had to look up). 
I am checking if the conditon statisfies (which is done by mathmatical formula to check if the number of the digit which are divisible by d1 and d2) 
i reassign the value of answer to min of ans and mid and i again start a loop intialising high as mid -1 .

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ques 2 --------------------------------------------------------------------------------------------------------------------------------------------------------

High-access-employees-----

class Solution {
public:

    bool satisfy(vector<int>v){
        int count=0;
        sort(v.begin(),v.end());
        for(int i = 0; i+3 <= v.size(); i++) {
            if ( v[i+2] - v[i] < 100) {
                return true;
            }
        }
        return false;
    }

    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        map<string,vector<int>>mp;
        for(int i=0;i<access_times.size();i++){
            mp[access_times[i][0]].push_back(stoi(access_times[i][1]));
        }
        vector<string>ans;
        for(auto i: mp){
            if(satisfy(i.second)){
                ans.push_back(i.first);
            }
        }
        return ans;

    }
};


Here the intutuion is quite brute force. Here I have taken a map where I have stored the name and vector of int of the meeting time. Then i iterate
over the map and check if the vector has 3 concecutive meet in 1hour span . If yes I store the name.

-------------------------------------------------------------------------------------------------------------------------------------------------

Ques 3 --------------------------------------------------------------------------------------------------------------------------------
Query-kth-smallest-trimmed-number--------------------------------------------

class Solution {
public:
    vector<int> smallestTrimmedNumbers(vector<string>& nums, vector<vector<int>>& q) {
        vector<pair<string,int >>v;
        
        vector<int >ans;
        
        
        for( int  i=0; i<q.size() ; i++){
            
             v.clear();
            
            int  len = q[i][1];
            int  idx = q[i][0];
            int  cnt=0;
            
            for( auto i : nums){
           
                int leng=i.length();
            
                                
                v.push_back({i.substr(leng-len,len),cnt++});
                
            }
            
          
            sort(v.begin(),v.end());
            
            ans.push_back(v[idx-1].second);
            
            
        }
        
        return ans;
    }
};



Again the intution is quite brute force and the code is quite self explaintory as well.
-----------------------------------------------------------------------------------------------------------------------------------------------------

Ques 4 ----------------------------------------------------------------------------------------------------------------------------------------------

combination-sum-iii--------------\
class Solution {
public:
    void solve(vector<vector<int>>& ans, vector<int>& output, int i, int k, int n){
        //base case
        if(output.size() == k && n == 0){
            ans.push_back(output);
            return;
        }
        if(output.size() == k && n != 0){
            return;
        }

        //recursive relation
        for(int x=i; x<=9; x++){
            output.push_back(x);
            solve(ans, output, x+1, k, n-x);
            //backtracking
            output.pop_back();
        }
    }


    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> output;
        int i = 1;
        solve(ans, output, i, k, n);
        return ans;
    }
};


Here I am applying backtracking(although at first I did brute force by taking 3 loops but after seeing the topic I came to this approach). 
Here basically I am recursively calling the function solve 9 times and everytime when the sum turns out to be 0 I store it in ans vector.
The backtracking comes in when I pop the last element from the output vector in order to try out every possible combination.

---------------------------------------------------------------------------------------------------------------------------------------


Ques 7---------------------------------------------------------------------------------------------------------------------------------------
Find Missing and repeating----------------------------------------

vector<int> findTwoElement(vector<int> arr, int n) {
        // code here
        int repeatingNumber=-1;
        int missingNumber=-1;
        
        int i=0;
        while(i<n)
        {
            if(arr[i]!=arr[arr[i]-1])
            {
                swap(arr[i],arr[arr[i]-1]);
            }
            else{
                
                i++;
            }
            
        }
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]!=i+1)
            {
                repeatingNumber=arr[i];
                missingNumber=i+1;
            }
        }
        return {repeatingNumber,missingNumber};

Here I am doing position sorting, which basically means that I am putting every number to its specified index. 
By doing so I can arrange every number in a sorted order and then it would be a piece of cake to find out the missing and repeating number from a sorted array.

------------------------------------------------------------------------------------------------------------------------------------


